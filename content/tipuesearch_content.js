var tipuesearch = {"pages": [{'title': '關於', 'text': '網頁：請填寫目前網站所在網址， https://41023155.github.io/cd2024/content/index.html \n 網誌：請填寫目前網站所在的URL/blog， https://41023155.github.io/cd2024/blog/index.html \n 簡報: 請填寫目前網站所在的 URL/reveal,\xa0 https://41023155.github.io/cd2024/content/index.html \n 對應以太坊：請填寫目前網站所的Github連結以太坊 https://github.com/41023155/cd2024 \n 團隊的github  https://github.com/mdecd2024/2a-midag8 \n 本cmsimde網際內容管理系統的範本應答： \n https://github.com/mdecycu/cmsimde_site \n 此範本將cmsimde作為子目錄硬體子模組，使用者可依需求自行修改 \n 對應以太坊網址： https ://mde.tw/cmsimde_site \n', 'tags': '', 'url': '關於.html'}, {'title': 'work', 'text': '', 'tags': '', 'url': 'work.html'}, {'title': 'w1', 'text': '', 'tags': '', 'url': 'w1.html'}, {'title': 'w2', 'text': '\n # 甲班第一組組長如何建立 midag1 Team \n \n 在這部影片我學到了如何用Codespaces維護2a-midag8分組倉儲 操作歸納如下 \n 用 Codespaces 開啟動態網頁 \n 執行以下命令使 init_replit 檔案具有執行權限： \n chmod u+x init_replit \n 執行 init_replit 檔案： \n ./init_replit \n 執行 main.py 檔案： \n python3 main.py \n 用 Codespaces 開啟靜態網頁 \n 執行以下命令啟動 Python 內建的簡易伺服器： \n python3 -m http.server \n 如何進行改版 \n 使用 git status 命令查看目前的修改狀態。 \n 使用 git add . 命令將所有修改的檔案添加到暫存區。 \n 使用 git commit -m "新增的的內容" 命令提交修改，並填入適合的提交訊息。 \n 使用 git push 將本地的提交推送到遠端倉儲。 \n \n \n \n # 如何利用近端可攜系統維護分組網站 \n \n 在這部影片我學到了如何用近端可攜系統維護分組網站 操作歸納如下 \n 1.SSH 金鑰： 使用 Puttygen 建立一把 SSH 金鑰並將其存儲為 .ppk 格式的檔案。 \n 2.SSH 金鑰導入 Putty： 使用 Putty 將 SSH 金鑰導入，以便在遠端伺服器上進行身份驗證。 \n 3.PuTTY 會話設定： 在 Regedit 中找到 HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions\\github.com 鍵，將其匯出為 .reg 檔案，這將保存你的 PuTTY 會話設定。 \n 4.本地端進行改版： \n 切換到暫存目錄： \n cd tmp \n 克隆倉庫： \n git clone --recurse-submodules git@github.com:mdecd2024/2a-midag1.git \n 進入克隆的倉庫目錄： \n cd 2a-midag1 \n 進行修改和提交： \n #進行修改... \n git add . \n git commit -m "自己要推的東西" \n 推送到遠端倉庫： \n git push \n 5.其他使用者推送： \n 獲取你的 IPv4 地址： \n ipconfig \n 在組別下的 Python 腳本中導入你的 IPv4 環境。 \n 允許組別中的其他成員更新和推送修改。 \n \n \n \n # 如何利用近端可攜系統維護分組網站w2-1 說明甲班第一組組長如何建立 midag1 Team, 並利用 Codespaces 維護 2a-midag1 分組倉儲 \n \n 用github classroom建立組別倉儲，組長在or create a new team處以midag X 來稱謂組別名稱並+create team創立。在組別創立後，組員各自去join進入組別內。倉儲完全建立好後去到倉儲的settings並選取pages就可進入主分支。啟動完github pages就可以做code，並使用codespaces來維護內容。在codespaces中有許多終端機許多埠號資源可使用，不需要再公用443。啟動終端機要先安裝模組。使用者+執行+檔案位置=chmod u+x init_replit執行，執行安裝好後會直接給予2記憶體容量。但沒有run了，所以要在自己設定python3 main.py執行動態，利用8080幫我們開啟瀏覽器。連結埠號會呈現亂碼，所以別人無法進入。login進入動態後就可更改內容。終端機每個人每月都有120code小時。要push倉儲要新增終端機後，進行git add->git commit"網頁標題"，執行後就會直接推上不需要在轉檔。啟動靜態要在新增終端機，有python3內建模組了就可以直接http.server直接啟動埠號，8000會自動開啟瀏覽器連結，就可以直接進入到靜態。用完codespaces要在關閉code讓計時暫停。 \n \n \n \n \n \n', 'tags': '', 'url': 'w2.html'}, {'title': 'w3', 'text': '\n \n \n \n # 將英文文章翻譯成中文並整理 \n \n \n 負責翻譯23~44頁 因為本組只有4位 因此更加努力的負責自己part \n https://github.com/41023155/cd2024/blob/main/downloads/section%7B%E5%A4%A7%E6%A8%99%7D.txt \n 因為不熟悉自行丟入到自己的個人倉儲 因此花費時間比較久 稍微延到了進度 還請老師體諒 \n 慢慢了解此文章是在說什麼內容 達到老師希望我們做到的事 \n \n \n # 如何將個人倉儲設為 2a-midag2 分組倉儲的子模組 \n \n \n 在replit來維護的話，有一些特定的方法，Repri是綁到你給他的賬號下。假如現在在近端做，就必須把它克隆下來然後再進行操作然後再推回去。利用SSH ，先確認在靜端是否有權限，權限是在登錄cadlab檔上的putty.reg，此部分是利用putty做的，在近端部分沒有時間限制，在目前系統上putty是沒有任何setings。但現在要用ssh刻隆下它，就必須要權限。在找到實體權限後雙擊就可寫入進去，在察看putty有出現對應的key與setings，都有就可用setings進行刻隆，並且改版可以push回去。載入之後有setings名稱，並確認是否有設proxy，因為沒有設ipv所以沒有proxy，所以之前設定部分要修改成none，並確認key是否有更改。key要設到外部才可攜。 確認可以連線後，就可以把key as push出來，key就會在主態登錄檔regedit中，在current_root下的software可找到設定的setings，並且裡面就有對應的key。 有權限後就可刻隆。刻隆在c槽比較快速，切換槽c並在槽中用mkdir建一個tmp，並用git clone --子模組recurse+ssh+對應帳號 刻隆下。 執行成功就可以讓倉儲設為子模組，先進入倉儲對應目錄把整個資料抓下，並git add。(分組倉儲底下)組倉儲名稱+git+子模組submodule+add(表示用git建立子模組)+個人課程倉儲+目錄，用https去抓子模組在分組倉儲是沒有權限的。 可以把組員的倉儲抓下來。在個人更新時可以分段抓取，未處理完的章節可以不引進。在git push後不只建了目錄還會動gitmodules檔案，待第二個人還沒建子模組前就刻隆下來，將個人倉儲加為子模組之後，就要處理.gitmodules的衝突。 \n \n \n # 將組員的個人倉儲設為分組倉儲子模組 \n \n \n 已建立組別倉儲，利用倉儲對應的codespaces下git submodule add。確認git status分支是否跟主分支是同步的，在用ls-l秀出內容後clear下來。接著用git submodule add+倉儲網址+git+學號，指令意思是必須在分組倉儲目錄新增一個子模組，其中子模組要的資料在複製的網址中取得，並打上目錄名稱。成功 克隆後add在commit推上去，推上後回到倉儲確認有子模組資料加入。其中子模組是有版本的，意思是可以開發跟推出同步進行，版本可自行決定公布。 \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w3.html'}, {'title': 'w4', 'text': '', 'tags': '', 'url': 'w4.html'}, {'title': '公分西德', 'text': "SMap  - 網站地圖 - 依序排列網站的所有頁面。 \n EditA  - 編輯所有頁面 - 將所有頁面放入編輯模式中，主要用於處理頁面遷移、刪除或決定衝突頁面內容版本。 \n 編輯 -編輯頁面-先選擇要編輯的單一頁面後，再點選編輯，即可進入單一頁面的編輯模式。 \n 配置 - 設定網站 - 編輯頁面標題與管理員密碼。 \n 搜尋 - 動態頁面內容的關鍵字搜尋。 \n IUpload  - 圖片檔案上傳 - 圖檔的上傳功能，可以上傳jpg、png和gif文件，其中若在手機上傳圖文件，系統會自動將圖片檔案縮小為800x800大小。 \n IList  - 圖片檔案清單 - 上市可以直接在頁面編輯模式中引用的圖片檔案。 \n FUpload  - 檔案上傳 - 一般檔案的上傳功能，目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl '、'txt'、'html'、'mp4'等，使用者可以自行修改。 \n FList  - 文件清單 - 上市可以直接在頁面編輯模式中引用的上傳文件。 \n 登出 -登出頁面編輯模式。 \n 轉換 - 將動態網站中位於 config/content.htm 文件，透過分頁設定轉為內容目錄中的靜態網頁。 \n acp  - git add、git commit 和 git Push，通常只能在 localhost 或自架主機上網頁表單協助將以太坊改版內容推送到 Github 使用。 \n SStatic  - 啟動靜態網站 - 利用Python啟動網站伺服器功能，可以讓使用者檢查轉檔後的靜態網站內容。 \n RStatic  - Replit 靜態網站 URL - 僅用於 Replit 模式，當使用者點擊 SStatic 後，可以點擊 RStatic 進入尚未推向 Github Pages 的靜態網站。 \n 80  - 由 init.py 中 static_port 決定的連結字符串，一般不使用 80，僅在 Replit 中為了與動態網站佔用端口，才特別設為 80。 \n \n", 'tags': '', 'url': '公分西德.html'}, {'title': '雷普利特', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit  ./init_replit \n 複製時： \n .replit：python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n 對於 cmsimde_site （不需要）： git submodule update --init --recursive \n 對於 cmsimde：pip installflaskflask_corsbs4lxmlpelicanmarkdowngevent \n 密碼產生器：\xa0  https://mde.tw/cmsite/content/Brython.html ?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3485858500000m Python \xa0 \n \n 僅適用於 IPv6 Ubuntu： .ssh 目錄中的配置，將 SSH 會話名稱設為 github.com： 主機 github.com 使用者 git 主機名稱 github.com  ProxyCommand /usr/bin/ncat --proxy p4.cycu.org: 3128 - -proxy-type http %h %p  for Replit:  .ssh 目錄中的配置，將 SSH 會話名稱設為 github.com: 主機 github.com 用戶 git 主機名 github.co  #since Replit 適用於IPv4，因此沒有ProxyCommand 設定需要 #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': '雷普利特.html'}, {'title': '布萊頓', 'text': 'https://en.wikipedia.org/wiki/Python_（程式語言） \n 例子： \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python教學： \n https://docs.python.org/3/tutorial/ \n Python 的非正式介紹 \n 縮排（Python 採用 4 個 Spaces 縮排，以介面執行範圍） \n 變數（ Python 關鍵字 ） \n 註（#單行註解、三單標註或三雙標註標註多行註解） \n 數 (整數 int(), 浮點數 float()) \n 字串 （字符串） \n print (Python 內建函數,  print() 函式) \n Python是控制流程工具 \n 為了 \n 如果 \n 範圍 \n 打開 \n 讀 \n 清單 \n 元組 \n 字典 \n 功能 \n 嘗試...除了 \n 休息 \n 經過 \n 類別 \n 此頁面示範如何在同一頁面下納入多個線上Ace編輯器與執行按鈕（ practice_html.txt 動態頁面超檔案）。 \n Practice_html.txt 動態頁面超檔案應該可以在啟動 Brython 時，設定會將 .py 檔案放入 downloads/py 目錄中引用。 \n 也即將所有對應的 html 也使用 Brython 產生，然後編寫為 類別 後，在範例匯入時透過 實例 引用。 \n <!-- 啟動 Brython --> \n<腳本> \n視窗.onload=函數(){ \nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}); \n} \n</腳本> \n 從1累加到100： \n 1 加到 100 \n 將 iterable 與 iterator 相關說明 ，利用 Brython 與 Ace Editor 整理在此頁面。 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 檔案名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從1累加到100第2部分： \n 1 加到 100 cango_三_齒輪 BS蛇 人工智慧俄羅斯方塊 旋轉塊 \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 檔案名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': '布萊頓.html'}]};